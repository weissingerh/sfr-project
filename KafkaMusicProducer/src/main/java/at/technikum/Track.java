/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package at.technikum;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** Top tracks provided by last fm api */
@org.apache.avro.specific.AvroGenerated
public class Track extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6975192543147975273L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Track\",\"namespace\":\"at.technikum\",\"doc\":\"Top tracks provided by last fm api\",\"fields\":[{\"name\":\"artist\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"playcount\",\"type\":\"int\"},{\"name\":\"listeners\",\"type\":\"int\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Track> ENCODER =
      new BinaryMessageEncoder<Track>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Track> DECODER =
      new BinaryMessageDecoder<Track>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Track> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Track> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Track> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Track>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Track to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Track from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Track instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Track fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String artist;
   private int playcount;
   private int listeners;
   private java.lang.String title;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Track() {}

  /**
   * All-args constructor.
   * @param artist The new value for artist
   * @param playcount The new value for playcount
   * @param listeners The new value for listeners
   * @param title The new value for title
   */
  public Track(java.lang.String artist, java.lang.Integer playcount, java.lang.Integer listeners, java.lang.String title) {
    this.artist = artist;
    this.playcount = playcount;
    this.listeners = listeners;
    this.title = title;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return artist;
    case 1: return playcount;
    case 2: return listeners;
    case 3: return title;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: artist = (java.lang.String)value$; break;
    case 1: playcount = (java.lang.Integer)value$; break;
    case 2: listeners = (java.lang.Integer)value$; break;
    case 3: title = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'artist' field.
   * @return The value of the 'artist' field.
   */
  public java.lang.String getArtist() {
    return artist;
  }

  /**
   * Gets the value of the 'artist' field as an Optional<java.lang.String>.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalArtist() {
    return Optional.<java.lang.String>ofNullable(artist);
  }

  /**
   * Sets the value of the 'artist' field.
   * @param value the value to set.
   */
  public void setArtist(java.lang.String value) {
    this.artist = value;
  }

  /**
   * Gets the value of the 'playcount' field.
   * @return The value of the 'playcount' field.
   */
  public int getPlaycount() {
    return playcount;
  }

  /**
   * Gets the value of the 'playcount' field as an Optional<java.lang.Integer>.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalPlaycount() {
    return Optional.<java.lang.Integer>ofNullable(playcount);
  }

  /**
   * Sets the value of the 'playcount' field.
   * @param value the value to set.
   */
  public void setPlaycount(int value) {
    this.playcount = value;
  }

  /**
   * Gets the value of the 'listeners' field.
   * @return The value of the 'listeners' field.
   */
  public int getListeners() {
    return listeners;
  }

  /**
   * Gets the value of the 'listeners' field as an Optional<java.lang.Integer>.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalListeners() {
    return Optional.<java.lang.Integer>ofNullable(listeners);
  }

  /**
   * Sets the value of the 'listeners' field.
   * @param value the value to set.
   */
  public void setListeners(int value) {
    this.listeners = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Gets the value of the 'title' field as an Optional<java.lang.String>.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalTitle() {
    return Optional.<java.lang.String>ofNullable(title);
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Creates a new Track RecordBuilder.
   * @return A new Track RecordBuilder
   */
  public static at.technikum.Track.Builder newBuilder() {
    return new at.technikum.Track.Builder();
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Track RecordBuilder
   */
  public static at.technikum.Track.Builder newBuilder(at.technikum.Track.Builder other) {
    if (other == null) {
      return new at.technikum.Track.Builder();
    } else {
      return new at.technikum.Track.Builder(other);
    }
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Track instance.
   * @param other The existing instance to copy.
   * @return A new Track RecordBuilder
   */
  public static at.technikum.Track.Builder newBuilder(at.technikum.Track other) {
    if (other == null) {
      return new at.technikum.Track.Builder();
    } else {
      return new at.technikum.Track.Builder(other);
    }
  }

  /**
   * RecordBuilder for Track instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Track>
    implements org.apache.avro.data.RecordBuilder<Track> {

    private java.lang.String artist;
    private int playcount;
    private int listeners;
    private java.lang.String title;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(at.technikum.Track.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.artist)) {
        this.artist = data().deepCopy(fields()[0].schema(), other.artist);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.playcount)) {
        this.playcount = data().deepCopy(fields()[1].schema(), other.playcount);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.listeners)) {
        this.listeners = data().deepCopy(fields()[2].schema(), other.listeners);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.title)) {
        this.title = data().deepCopy(fields()[3].schema(), other.title);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Track instance
     * @param other The existing instance to copy.
     */
    private Builder(at.technikum.Track other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.artist)) {
        this.artist = data().deepCopy(fields()[0].schema(), other.artist);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.playcount)) {
        this.playcount = data().deepCopy(fields()[1].schema(), other.playcount);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.listeners)) {
        this.listeners = data().deepCopy(fields()[2].schema(), other.listeners);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.title)) {
        this.title = data().deepCopy(fields()[3].schema(), other.title);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'artist' field.
      * @return The value.
      */
    public java.lang.String getArtist() {
      return artist;
    }

    /**
      * Gets the value of the 'artist' field as an Optional<java.lang.String>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.String> getOptionalArtist() {
      return Optional.<java.lang.String>ofNullable(artist);
    }

    /**
      * Sets the value of the 'artist' field.
      * @param value The value of 'artist'.
      * @return This builder.
      */
    public at.technikum.Track.Builder setArtist(java.lang.String value) {
      validate(fields()[0], value);
      this.artist = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'artist' field has been set.
      * @return True if the 'artist' field has been set, false otherwise.
      */
    public boolean hasArtist() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'artist' field.
      * @return This builder.
      */
    public at.technikum.Track.Builder clearArtist() {
      artist = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'playcount' field.
      * @return The value.
      */
    public int getPlaycount() {
      return playcount;
    }

    /**
      * Gets the value of the 'playcount' field as an Optional<java.lang.Integer>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Integer> getOptionalPlaycount() {
      return Optional.<java.lang.Integer>ofNullable(playcount);
    }

    /**
      * Sets the value of the 'playcount' field.
      * @param value The value of 'playcount'.
      * @return This builder.
      */
    public at.technikum.Track.Builder setPlaycount(int value) {
      validate(fields()[1], value);
      this.playcount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'playcount' field has been set.
      * @return True if the 'playcount' field has been set, false otherwise.
      */
    public boolean hasPlaycount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'playcount' field.
      * @return This builder.
      */
    public at.technikum.Track.Builder clearPlaycount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'listeners' field.
      * @return The value.
      */
    public int getListeners() {
      return listeners;
    }

    /**
      * Gets the value of the 'listeners' field as an Optional<java.lang.Integer>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.Integer> getOptionalListeners() {
      return Optional.<java.lang.Integer>ofNullable(listeners);
    }

    /**
      * Sets the value of the 'listeners' field.
      * @param value The value of 'listeners'.
      * @return This builder.
      */
    public at.technikum.Track.Builder setListeners(int value) {
      validate(fields()[2], value);
      this.listeners = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'listeners' field has been set.
      * @return True if the 'listeners' field has been set, false otherwise.
      */
    public boolean hasListeners() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'listeners' field.
      * @return This builder.
      */
    public at.technikum.Track.Builder clearListeners() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }

    /**
      * Gets the value of the 'title' field as an Optional<java.lang.String>.
      * @return The Optional&lt;value&gt;.
      */
    public Optional<java.lang.String> getOptionalTitle() {
      return Optional.<java.lang.String>ofNullable(title);
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public at.technikum.Track.Builder setTitle(java.lang.String value) {
      validate(fields()[3], value);
      this.title = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public at.technikum.Track.Builder clearTitle() {
      title = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Track build() {
      try {
        Track record = new Track();
        record.artist = fieldSetFlags()[0] ? this.artist : (java.lang.String) defaultValue(fields()[0]);
        record.playcount = fieldSetFlags()[1] ? this.playcount : (java.lang.Integer) defaultValue(fields()[1]);
        record.listeners = fieldSetFlags()[2] ? this.listeners : (java.lang.Integer) defaultValue(fields()[2]);
        record.title = fieldSetFlags()[3] ? this.title : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Track>
    WRITER$ = (org.apache.avro.io.DatumWriter<Track>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Track>
    READER$ = (org.apache.avro.io.DatumReader<Track>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.artist);

    out.writeInt(this.playcount);

    out.writeInt(this.listeners);

    out.writeString(this.title);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.artist = in.readString();

      this.playcount = in.readInt();

      this.listeners = in.readInt();

      this.title = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.artist = in.readString();
          break;

        case 1:
          this.playcount = in.readInt();
          break;

        case 2:
          this.listeners = in.readInt();
          break;

        case 3:
          this.title = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










